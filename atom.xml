<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rex note</title>
  <subtitle>雨过，云过</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bestlixiang.site/"/>
  <updated>2017-05-05T23:42:16.000Z</updated>
  <id>http://bestlixiang.site/</id>
  
  <author>
    <name>rex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序及随机化算法</title>
    <link href="http://bestlixiang.site/2017/05/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8F%8A%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://bestlixiang.site/2017/05/06/快速排序及随机化算法/</id>
    <published>2017-05-05T16:04:52.000Z</published>
    <updated>2017-05-05T23:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：算法一直很重要，最近没有心情去看项目的代码与技术，所以就拿起其了算法导论来看，最经典的快速排序及随机化算法，java实现。<a id="more"></a></p>
<h2 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h2><ol>
<li>核心思想<br>分治思想和原址运算：看一张图<br><img src="http://o6plzvjf2.bkt.clouddn.com/131558588563352.jpg" alt="快速排序"></li>
<li><p>算法具体实现 </p>
<blockquote>
</blockquote>
<pre><code>public class QuickSort {
    public int partition(int[] a,int p,int r){
        int x = a[r];
        int i = -1;
        int temp = 0;
        for (int j = 0; j &lt; a.length-1; j++) {
            if(a[j]&lt;x){
                i=i+1;
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        temp = a[i+1];
        a[i+1] = x;
        a[r] = temp;
        return i+1;
    }

    public int[] quicksort(int[] b,int p,int r){
        if(p&lt;r){
            int q = partition(b,p,r);
            quicksort(b, p, q-1);
            quicksort(b, q+1, r);
        }
        return b;
    }

    public static void main(String[] args) {
        QuickSort sort = new QuickSort();
        int[] a = {2,8,7,1,3,5,6,4};
        int[] b = sort.quicksort(a, 0, a.length-1);
        for (int i : b) {
            System.out.print(i+&quot; &quot;);
        }
    }
}
</code></pre></li>
</ol>
<p>3.时间复杂度</p>
<p>通过分析我们最看重的平均复杂度是nlgn</p>
<h2 id="随机化算法"><a href="#随机化算法" class="headerlink" title="随机化算法"></a>随机化算法</h2><ol>
<li>核心思想</li>
</ol>
<p>在算法加入随机性，要么在使序列生成随机化，要么就是使主元随机化，这里我们使主元随机化。</p>
<ol>
<li><p>算法具体实现</p>
<blockquote>
</blockquote>
<pre><code>import java.util.Random;    
public class RandomQuickSort {
    public int partition(int[] a,int p,int r){
        int x = a[r];
        int i = -1;
        int temp = 0;
        for (int j = 0; j &lt; a.length-1; j++) {
            if(a[j]&lt;x){
                i=i+1;
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        temp = a[i+1];
        a[i+1] = x;
        a[r] = temp;
        return i+1;
    }

    public int randompartition(int[] a,int p,int r){
        int temp = 0;
        Random random = new Random();
        int i = random.nextInt(r);
        temp = a[i];
        a[i] = a[r];
        a[r] = temp;
        return partition(a, p, r);
    }

    public int[] randomquicksort(int[] b,int p,int r){
        if(p&lt;r){
            int q = randompartition(b, p, r);
            randomquicksort(b, p, q-1);
            randomquicksort(b, q+1, r);
        }
        return b;
    }

    public static void main(String[] args) {
        RandomQuickSort sort = new RandomQuickSort();
        int[] a = {2,8,7,1,3,5,6,4};
        int[] b = sort.randomquicksort(a, 0, a.length-1);
        for (int i : b) {
            System.out.print(i+&quot; &quot;);
        }
    }
}
</code></pre></li>
<li><p>时间复杂度</p>
</li>
</ol>
<p>通过分析我们最看重的平均复杂度是nlgn</p>
<h2 id="基本排序算法"><a href="#基本排序算法" class="headerlink" title="基本排序算法"></a>基本排序算法</h2><p><img src="http://o6plzvjf2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-05%20%E4%B8%8B%E5%8D%8810.15.58.png" alt="排序"></p>
<p>小结：同等情况下快速排序&gt;随机化算法&gt;归并排序&gt;插入排序；<br>在有序的情况下随机化算法&gt;快速排序</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>慢慢走，不要急！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：算法一直很重要，最近没有心情去看项目的代码与技术，所以就拿起其了算法导论来看，最经典的快速排序及随机化算法，java实现。
    
    </summary>
    
      <category term="算法" scheme="http://bestlixiang.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法导论" scheme="http://bestlixiang.site/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="排序" scheme="http://bestlixiang.site/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>git个人使用与多人协作</title>
    <link href="http://bestlixiang.site/2017/05/04/git%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/"/>
    <id>http://bestlixiang.site/2017/05/04/git个人使用与多人协作/</id>
    <published>2017-05-04T15:52:34.000Z</published>
    <updated>2017-05-04T15:55:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：因为没有加入到什么团队中，没有机会和别人一起合作过项目，所以对git使用并不熟练，但是这次比较空，就好好梳理一下吧！<a id="more"></a></p>
<h1 id="个人使用"><a href="#个人使用" class="headerlink" title="个人使用"></a>个人使用</h1><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><p>特点就是分布式了，请看下图，每一台电脑都是一个仓库，大家都可以使用。</p>
<p><img src="http://i4.buimg.com/1949/ae304bcf1db73902.jpg" alt="分布式"></p>
<h2 id="仓库理解及操作"><a href="#仓库理解及操作" class="headerlink" title="仓库理解及操作"></a>仓库理解及操作</h2><p>先上图：</p>
<p><img src="http://i2.muimg.com/593324/0b2d71ab51b7e2b6.jpg" alt="仓库"></p>
<p>有个上面的图做铺垫，下面的操作也就好理解了</p>
<p>添加文件：<code>git add file</code></p>
<p>提交文件：<code>git commit -m &quot;提交描述&quot;</code></p>
<p>查看状态:<code>git status</code></p>
<p>查看日志：<code>git log</code> 相关版本号可以通过reset来回退到任何提交时间点</p>
<p>添加远程库：<code>git remote add origin git@github.com:username/repository</code></p>
<p>推送到远程库： 第一次用：<code>git push -u origin master</code>之后用<code>git push origin master</code><br>注意点：要将电脑的ssh添加到你的github里</p>
<p>克隆远程库：<code>git clone origin git@github.com:username/repository</code></p>
<h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><p>我想大家需要理解这样一张图：</p>
<p><img src="http://i1.piimg.com/593324/2e66bb0030802f7f.png" alt="多人协作"></p>
<p>推送分支：<code>$ git push origin branchname</code></p>
<p>抓取分支：<code>git clone origin git@github.com:username/repository;git checkout -b dev origin/dev</code></p>
<p>基本操作肯定会碰到问题：</p>
<p>如果你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，那么就会提交被解决，这个时候就需要：</p>
<p><code>git pull</code></p>
<p>这个时候合并是有冲突的，需要你本地修改之后再提交上去。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前自己所要掌握的就是这些东西了，再遇到问题可以谷歌或者百度。<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">最后感谢廖雪峰的git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：因为没有加入到什么团队中，没有机会和别人一起合作过项目，所以对git使用并不熟练，但是这次比较空，就好好梳理一下吧！
    
    </summary>
    
      <category term="工具" scheme="http://bestlixiang.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://bestlixiang.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>String,StringBuilder,StringBuffer区别</title>
    <link href="http://bestlixiang.site/2017/05/04/String-StringBuilder-StringBuffer%E5%8C%BA%E5%88%AB/"/>
    <id>http://bestlixiang.site/2017/05/04/String-StringBuilder-StringBuffer区别/</id>
    <published>2017-05-04T11:50:29.000Z</published>
    <updated>2017-05-04T12:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：最近心情非常的不静，我知道自己需要沉下心去沉淀，慢慢来，小朋友。今天谈谈3个字符串类<a id="more"></a></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>查看String源码的时候，我们很容易看到<br>&gt;<br>    public final class String</p>
<p>从源码中对String的定义可以知道它是final类，这意味着她不可被继承，也不可被更改。而且总它的方法中也没有可以拼接字符串的函数。</p>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>查看StringBuilder源码的时候，我们也可以看到这样的定义：<br>&gt;<br>    public final class StringBuilder<br>    extends AbstractStringBuilder</p>
<p>我们发现他也是final类，但是它却又append()方法，这是为什么，我们找到它的append():</p>
<blockquote>
<pre><code>@Override
public StringBuilder append(String str) {
    super.append(str);
    return this;
}
</code></pre></blockquote>
<p>我们看到他的append()方法是调用他的父类来的，所以我们继续看看他的父类是在搞什么鬼👻</p>
<blockquote>
<pre><code>    public AbstractStringBuilder append(String str) {
    if (str == null)
        return appendNull();
    int len = str.length();
    ensureCapacityInternal(count + len);
    str.getChars(0, len, value, count);
    count += len;
    return this;
}
</code></pre></blockquote>
<p>我们终于找到他怎么又这个添加字符串的方法了。具体AbstractStringBuilder是怎么实现添加的就让想要了解的人继续往下看源码就好了。</p>
<p><strong>对比string:</strong> 我们可以从日常编写的代码可以了解到，用String拼接由于每次都是新建一个对象所以效率自然是低的，所以在使用字符串拼接的时候还是用StringBuilder比较好，但是对于单个常量字符串来说还是String好，因为它是放在常量池里，读取速度比放在堆中的对象自然是要快很多。</p>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>这又是一个什么鬼，继续看源码吧</p>
<blockquote>
<pre><code>public final class StringBuffer
extends AbstractStringBuilder
</code></pre></blockquote>
<p>这个和StringBuilder一样也是final类，但是我们可以很清楚的看到也是继承了AbstractStringBuilder，也就是说它也有append()方法，但是我们可以它的append()方法。</p>
<blockquote>
<pre><code>public synchronized StringBuffer append(String str) {
    toStringCache = null;
    super.append(str);
    return this;
}
</code></pre></blockquote>
<p>我们看到它的append()方法加入了synchronized关键字，所以它是个线程安全的类</p>
<p><strong>和StringBuilder的区别：</strong> 由于他是线程安全的，所以自然牺牲了效率，在操作速度上没有StringBuilder快。</p>
<p>总结：点点滴滴积累</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：最近心情非常的不静，我知道自己需要沉下心去沉淀，慢慢来，小朋友。今天谈谈3个字符串类
    
    </summary>
    
      <category term="java基础" scheme="http://bestlixiang.site/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://bestlixiang.site/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>请不要无脑</title>
    <link href="http://bestlixiang.site/2017/04/27/%E8%AF%B7%E4%B8%8D%E8%A6%81%E6%97%A0%E8%84%91/"/>
    <id>http://bestlixiang.site/2017/04/27/请不要无脑/</id>
    <published>2017-04-27T12:41:48.000Z</published>
    <updated>2017-04-29T01:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">大喊一声密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      简单，不为人知.
    
    </summary>
    
      <category term="生活" scheme="http://bestlixiang.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次失败的面试</title>
    <link href="http://bestlixiang.site/2017/04/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%9D%A2%E8%AF%95/"/>
    <id>http://bestlixiang.site/2017/04/26/记一次失败的面试/</id>
    <published>2017-04-26T12:41:48.000Z</published>
    <updated>2017-04-29T01:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">大喊一声密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      简单，不为人知.
    
    </summary>
    
      <category term="生活" scheme="http://bestlixiang.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="面试" scheme="http://bestlixiang.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目初体验</title>
    <link href="http://bestlixiang.site/2017/04/24/SSH%E9%A1%B9%E7%9B%AE%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://bestlixiang.site/2017/04/24/SSH项目初体验/</id>
    <published>2017-04-24T13:41:48.000Z</published>
    <updated>2017-05-04T12:14:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：历时四天，终于在视频的帮助下完成了基于SSH（struts2+hibernate3+spring4）的一个网站商城项目，也是自己第一次采用idea开发项目简单，谈谈收获和感想。<a id="more"></a></p>
<h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><ol>
<li>导包<br>主要的文件：导三大框架的包<br>这里的包我也不贴图了，都是最基本的jar包</li>
<li>框架配置<br>这里我想说的是三个文件：<ol>
<li>web.xml：配置struts核心过滤器和配置Spring的核心监听器</li>
<li>struts.xml：配置各种action</li>
<li>applicationContext.xml：作为大管家事情也就比较多了，有配置数据库C3P0连接池，配置Hibernate引入数据源，事务管理，管理action，service，dao</li>
</ol>
</li>
<li>按层码代码</li>
</ol>
<h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><ol>
<li>web层<br>主要使用action进行控制，这里使用了动态匹配，如userAction_*.action<br>其中要点：<ol>
<li>值栈：对于单个业务逻辑来说存取值实在是太方便了。</li>
<li>模型驱动：对于模块的对象使用模型存值也很方便</li>
<li>拦截器：对于后台范围一定要对访问进行控制，若未登录，请先登录</li>
<li>ognl表达式：可以进行运算，除模型驱动以及值栈内取值之外都要加#</li>
</ol>
</li>
<li>service层<br>本次项目并未多少体现出来，我们只要注意添加spring事务注解</li>
<li>dao层<br>此次使用的hibernate，要点如下<ol>
<li>实体映射文件：对于主外键一定要设置正确，懒加载问题，级联删除问题</li>
<li>hql语句：join的用法，面向对象的语句编写</li>
</ol>
</li>
</ol>
<h2 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h2><p>这里只是简单说说作为一个商场应该具有的模块</p>
<ol>
<li>前台<br>首页；前台用户 ；一级目录； 二级目录； 商品； 购物车； 订单</li>
<li>后台<br>后台用户；一级目录；二级目录；商品；订单</li>
</ol>
<h2 id="查bug方法"><a href="#查bug方法" class="headerlink" title="查bug方法"></a>查bug方法</h2><p>即使是按着视频来的，但是也还是会出错，有的时候还查了一个多小时，bug：码农的一生之敌呀！<br>回到正题：首先看控制台错误，分析错误类型</p>
<ol>
<li>前台传数据错误<br>可以将表单的发送方式改为get，这个就可以从uri中看出错误了，自己好几次入坑，就是在参数填写的地方多了一个空格，欲哭无泪。</li>
<li>业务逻辑代码错误<br>其实最简单也最烦，就是利用debug。按逻辑顺序进行查错。</li>
<li>数据库查询出错<br>可以充分利用控制台输出的sql语句进行排错，将sql语句放到sql桌面程序中查询，是否与自己想要的结果一致，如果不一致，就很有可能是自己的hql语句写错，或者映射文件出错了。</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>关于这个项目架构都是比较简单的，业务逻辑也都是CRUD也算简单，可能还有最重要的高并发问题没有考虑，但是整个项目做下来，自己也算理解了整个项目系统，但是自己绝对不能以CRUD为终点，继续向前加油！！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：历时四天，终于在视频的帮助下完成了基于SSH（struts2+hibernate3+spring4）的一个网站商城项目，也是自己第一次采用idea开发项目简单，谈谈收获和感想。
    
    </summary>
    
      <category term="编程" scheme="http://bestlixiang.site/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ssh" scheme="http://bestlixiang.site/tags/ssh/"/>
    
      <category term="java" scheme="http://bestlixiang.site/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>iis实现手机端访问电脑本地服务器</title>
    <link href="http://bestlixiang.site/2017/04/24/iis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%AE%BF%E9%97%AE%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://bestlixiang.site/2017/04/24/iis实现手机端访问电脑本地服务器/</id>
    <published>2017-04-24T12:41:48.000Z</published>
    <updated>2017-04-29T01:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：对于很多没有服务器的人来说,实现手机端访问自己写的网页还是有困难的，虽然我们可以可以利用githubpage来实现挂载页面，但是调试起来还是不方便，所以iis就成为了一种简单的方式。<a id="more"></a></p>
<h2 id="iis简介"><a href="#iis简介" class="headerlink" title="iis简介"></a>iis简介</h2><p>iis（Internet Information Services）是由微软公司提供的基于运行Microsoft  Windows的互联网基本服务,其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。</p>
<h2 id="iis安装"><a href="#iis安装" class="headerlink" title="iis安装"></a>iis安装</h2><p>这里我就不多说了，网上一搜，安装教程一大把，这里推荐一个链接<a href="https://jingyan.baidu.com/article/e2284b2b3cb58ae2e6118d22.html" target="_blank" rel="external">安装iis</a></p>
<h2 id="有无线的时候使用"><a href="#有无线的时候使用" class="headerlink" title="有无线的时候使用"></a>有无线的时候使用</h2><p>大部分人，大部分时间，大部分地方，相信大家都会身处在无线之下，所以只要按照上面的链接使用就可以了。</p>
<h2 id="没无线的时候使用"><a href="#没无线的时候使用" class="headerlink" title="没无线的时候使用"></a>没无线的时候使用</h2><p>这个时候就要借助流量与热点了</p>
<ol>
<li>打开手机热点</li>
<li>查看电脑ip地址<br>一般这个时候ip地址已经变了，所有之前按照有无线的时候电脑的ip设置访问地址就有问题了，所以要利用新的ip地址设置访问地址</li>
<li>用手机访问新的ip地址<br>一下子就爽歪歪了</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>iis对于windows用户来说真是出家旅行，调试代码必备之良品。</li>
<li>当不能访问的时候一定要随时关注电脑的ip地址是否已经发生变化，做到随时更改</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：对于很多没有服务器的人来说,实现手机端访问自己写的网页还是有困难的，虽然我们可以可以利用githubpage来实现挂载页面，但是调试起来还是不方便，所以iis就成为了一种简单的方式。
    
    </summary>
    
      <category term="编程" scheme="http://bestlixiang.site/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="服务器" scheme="http://bestlixiang.site/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
