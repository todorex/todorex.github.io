<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rex note</title>
  <subtitle>雨过，云过</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bestlixiang.site/"/>
  <updated>2017-05-05T16:14:07.000Z</updated>
  <id>http://bestlixiang.site/</id>
  
  <author>
    <name>rex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序及随机化算法</title>
    <link href="http://bestlixiang.site/2017/05/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8F%8A%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://bestlixiang.site/2017/05/06/快速排序及随机化算法/</id>
    <published>2017-05-05T16:04:52.000Z</published>
    <updated>2017-05-05T16:14:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：算法一直很重要，最近没有心情去看项目的代码与技术，所以就拿起其了算法导论来看，最经典的快速排序及随机化算法，java实现。<a id="more"></a></p>
<h2 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h2><ol>
<li>核心思想<br>分治思想和原址运算：看一张图<br><img src="http://o6plzvjf2.bkt.clouddn.com/131558588563352.jpg" alt="快速排序"></li>
<li><p>算法具体实现 </p>
<blockquote>
</blockquote>
<pre><code>public class QuickSort {
    public int partition(int[] a,int p,int r){
        int x = a[r];
        int i = -1;
        int temp = 0;
        for (int j = 0; j &lt; a.length; j++) {
            if(a[j]&lt;x){
                i=i+1;
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        temp = a[i+1];
        a[i+1] = x;
        a[r] = temp;
        return i+1;
    }

    public int[] quicksort(int[] b,int p,int r){
        if(p&lt;r){
            int q = partition(b,p,r);
            quicksort(b, p, q-1);
            quicksort(b, q+1, r);
        }
        return b;
    }

    public static void main(String[] args) {
        QuickSort sort = new QuickSort();
        int[] a = {2,8,7,1,3,5,6,4};
        int[] b = sort.quicksort(a, 0, a.length-1);
        for (int i : b) {
            System.out.print(i+&quot; &quot;);
        }
    }
}
</code></pre></li>
</ol>
<p>3.时间复杂度</p>
<p>通过分析我们最看重的平均复杂度是nlgn</p>
<h2 id="随机化算法"><a href="#随机化算法" class="headerlink" title="随机化算法"></a>随机化算法</h2><ol>
<li>核心思想</li>
</ol>
<p>在算法加入随机性，要么在使序列生成随机化，要么就是使主元随机化，这里我们使主元随机化。</p>
<ol>
<li><p>算法具体实现</p>
<blockquote>
</blockquote>
<pre><code>import java.util.Random;    
public class RandomQuickSort {
    public int partition(int[] a,int p,int r){
        int x = a[r];
        int i = -1;
        int temp = 0;
        for (int j = 0; j &lt; a.length; j++) {
            if(a[j]&lt;x){
                i=i+1;
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        temp = a[i+1];
        a[i+1] = x;
        a[r] = temp;
        return i+1;
    }

    public int randompartition(int[] a,int p,int r){
        int temp = 0;
        Random random = new Random();
        int i = random.nextInt(p);
        temp = a[i];
        a[i] = a[r];
        a[r] = temp;
        return partition(a, p, r);
    }

    public int[] randomquicksort(int[] b,int p,int r){
        if(p&lt;r){
            int q = randompartition(b, p, r);
            randomquicksort(b, p, q-1);
            randomquicksort(b, q+1, r);
        }
        return b;
    }

    public static void main(String[] args) {
        RandomQuickSort sort = new RandomQuickSort();
        int[] a = {2,8,7,1,3,5,6,4};
        int[] b = sort.randomquicksort(a, 0, a.length-1);
        for (int i : b) {
            System.out.print(i+&quot; &quot;);
        }
    }
}
</code></pre></li>
<li><p>时间复杂度</p>
</li>
</ol>
<p>通过分析我们最看重的平均复杂度是nlgn</p>
<h2 id="基本排序算法"><a href="#基本排序算法" class="headerlink" title="基本排序算法"></a>基本排序算法</h2><p><img src="http://o6plzvjf2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-05%20%E4%B8%8B%E5%8D%8810.15.58.png" alt="排序"></p>
<p>小结：同等情况下快速排序&gt;随机化算法&gt;归并排序&gt;插入排序；<br>在有序的情况下随机化算法&gt;快速排序</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>慢慢走，不要急！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：算法一直很重要，最近没有心情去看项目的代码与技术，所以就拿起其了算法导论来看，最经典的快速排序及随机化算法，java实现。
    
    </summary>
    
      <category term="算法" scheme="http://bestlixiang.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法导论" scheme="http://bestlixiang.site/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="排序" scheme="http://bestlixiang.site/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>git个人使用与多人协作</title>
    <link href="http://bestlixiang.site/2017/05/04/git%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/"/>
    <id>http://bestlixiang.site/2017/05/04/git个人使用与多人协作/</id>
    <published>2017-05-04T15:52:34.000Z</published>
    <updated>2017-05-04T15:55:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：因为没有加入到什么团队中，没有机会和别人一起合作过项目，所以对git使用并不熟练，但是这次比较空，就好好梳理一下吧！<a id="more"></a></p>
<h1 id="个人使用"><a href="#个人使用" class="headerlink" title="个人使用"></a>个人使用</h1><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><p>特点就是分布式了，请看下图，每一台电脑都是一个仓库，大家都可以使用。</p>
<p><img src="http://i4.buimg.com/1949/ae304bcf1db73902.jpg" alt="分布式"></p>
<h2 id="仓库理解及操作"><a href="#仓库理解及操作" class="headerlink" title="仓库理解及操作"></a>仓库理解及操作</h2><p>先上图：</p>
<p><img src="http://i2.muimg.com/593324/0b2d71ab51b7e2b6.jpg" alt="仓库"></p>
<p>有个上面的图做铺垫，下面的操作也就好理解了</p>
<p>添加文件：<code>git add file</code></p>
<p>提交文件：<code>git commit -m &quot;提交描述&quot;</code></p>
<p>查看状态:<code>git status</code></p>
<p>查看日志：<code>git log</code> 相关版本号可以通过reset来回退到任何提交时间点</p>
<p>添加远程库：<code>git remote add origin git@github.com:username/repository</code></p>
<p>推送到远程库： 第一次用：<code>git push -u origin master</code>之后用<code>git push origin master</code><br>注意点：要将电脑的ssh添加到你的github里</p>
<p>克隆远程库：<code>git clone origin git@github.com:username/repository</code></p>
<h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><p>我想大家需要理解这样一张图：</p>
<p><img src="http://i1.piimg.com/593324/2e66bb0030802f7f.png" alt="多人协作"></p>
<p>推送分支：<code>$ git push origin branchname</code></p>
<p>抓取分支：<code>git clone origin git@github.com:username/repository;git checkout -b dev origin/dev</code></p>
<p>基本操作肯定会碰到问题：</p>
<p>如果你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，那么就会提交被解决，这个时候就需要：</p>
<p><code>git pull</code></p>
<p>这个时候合并是有冲突的，需要你本地修改之后再提交上去。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前自己所要掌握的就是这些东西了，再遇到问题可以谷歌或者百度。<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">最后感谢廖雪峰的git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：因为没有加入到什么团队中，没有机会和别人一起合作过项目，所以对git使用并不熟练，但是这次比较空，就好好梳理一下吧！
    
    </summary>
    
      <category term="工具" scheme="http://bestlixiang.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://bestlixiang.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>String,StringBuilder,StringBuffer区别</title>
    <link href="http://bestlixiang.site/2017/05/04/String-StringBuilder-StringBuffer%E5%8C%BA%E5%88%AB/"/>
    <id>http://bestlixiang.site/2017/05/04/String-StringBuilder-StringBuffer区别/</id>
    <published>2017-05-04T11:50:29.000Z</published>
    <updated>2017-05-04T12:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：最近心情非常的不静，我知道自己需要沉下心去沉淀，慢慢来，小朋友。今天谈谈3个字符串类<a id="more"></a></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>查看String源码的时候，我们很容易看到<br>&gt;<br>    public final class String</p>
<p>从源码中对String的定义可以知道它是final类，这意味着她不可被继承，也不可被更改。而且总它的方法中也没有可以拼接字符串的函数。</p>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>查看StringBuilder源码的时候，我们也可以看到这样的定义：<br>&gt;<br>    public final class StringBuilder<br>    extends AbstractStringBuilder</p>
<p>我们发现他也是final类，但是它却又append()方法，这是为什么，我们找到它的append():</p>
<blockquote>
<pre><code>@Override
public StringBuilder append(String str) {
    super.append(str);
    return this;
}
</code></pre></blockquote>
<p>我们看到他的append()方法是调用他的父类来的，所以我们继续看看他的父类是在搞什么鬼👻</p>
<blockquote>
<pre><code>    public AbstractStringBuilder append(String str) {
    if (str == null)
        return appendNull();
    int len = str.length();
    ensureCapacityInternal(count + len);
    str.getChars(0, len, value, count);
    count += len;
    return this;
}
</code></pre></blockquote>
<p>我们终于找到他怎么又这个添加字符串的方法了。具体AbstractStringBuilder是怎么实现添加的就让想要了解的人继续往下看源码就好了。</p>
<p><strong>对比string:</strong> 我们可以从日常编写的代码可以了解到，用String拼接由于每次都是新建一个对象所以效率自然是低的，所以在使用字符串拼接的时候还是用StringBuilder比较好，但是对于单个常量字符串来说还是String好，因为它是放在常量池里，读取速度比放在堆中的对象自然是要快很多。</p>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>这又是一个什么鬼，继续看源码吧</p>
<blockquote>
<pre><code>public final class StringBuffer
extends AbstractStringBuilder
</code></pre></blockquote>
<p>这个和StringBuilder一样也是final类，但是我们可以很清楚的看到也是继承了AbstractStringBuilder，也就是说它也有append()方法，但是我们可以它的append()方法。</p>
<blockquote>
<pre><code>public synchronized StringBuffer append(String str) {
    toStringCache = null;
    super.append(str);
    return this;
}
</code></pre></blockquote>
<p>我们看到它的append()方法加入了synchronized关键字，所以它是个线程安全的类</p>
<p><strong>和StringBuilder的区别：</strong> 由于他是线程安全的，所以自然牺牲了效率，在操作速度上没有StringBuilder快。</p>
<p>总结：点点滴滴积累</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：最近心情非常的不静，我知道自己需要沉下心去沉淀，慢慢来，小朋友。今天谈谈3个字符串类
    
    </summary>
    
      <category term="java基础" scheme="http://bestlixiang.site/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://bestlixiang.site/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>请不要无脑</title>
    <link href="http://bestlixiang.site/2017/04/27/%E8%AF%B7%E4%B8%8D%E8%A6%81%E6%97%A0%E8%84%91/"/>
    <id>http://bestlixiang.site/2017/04/27/请不要无脑/</id>
    <published>2017-04-27T12:41:48.000Z</published>
    <updated>2017-04-29T01:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">大喊一声密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      简单，不为人知.
    
    </summary>
    
      <category term="生活" scheme="http://bestlixiang.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次失败的面试</title>
    <link href="http://bestlixiang.site/2017/04/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%9D%A2%E8%AF%95/"/>
    <id>http://bestlixiang.site/2017/04/26/记一次失败的面试/</id>
    <published>2017-04-26T12:41:48.000Z</published>
    <updated>2017-04-29T01:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">大喊一声密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      简单，不为人知.
    
    </summary>
    
      <category term="生活" scheme="http://bestlixiang.site/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="面试" scheme="http://bestlixiang.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目初体验</title>
    <link href="http://bestlixiang.site/2017/04/24/SSH%E9%A1%B9%E7%9B%AE%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://bestlixiang.site/2017/04/24/SSH项目初体验/</id>
    <published>2017-04-24T13:41:48.000Z</published>
    <updated>2017-05-04T12:14:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：历时四天，终于在视频的帮助下完成了基于SSH（struts2+hibernate3+spring4）的一个网站商城项目，也是自己第一次采用idea开发项目简单，谈谈收获和感想。<a id="more"></a></p>
<h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><ol>
<li>导包<br>主要的文件：导三大框架的包<br>这里的包我也不贴图了，都是最基本的jar包</li>
<li>框架配置<br>这里我想说的是三个文件：<ol>
<li>web.xml：配置struts核心过滤器和配置Spring的核心监听器</li>
<li>struts.xml：配置各种action</li>
<li>applicationContext.xml：作为大管家事情也就比较多了，有配置数据库C3P0连接池，配置Hibernate引入数据源，事务管理，管理action，service，dao</li>
</ol>
</li>
<li>按层码代码</li>
</ol>
<h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><ol>
<li>web层<br>主要使用action进行控制，这里使用了动态匹配，如userAction_*.action<br>其中要点：<ol>
<li>值栈：对于单个业务逻辑来说存取值实在是太方便了。</li>
<li>模型驱动：对于模块的对象使用模型存值也很方便</li>
<li>拦截器：对于后台范围一定要对访问进行控制，若未登录，请先登录</li>
<li>ognl表达式：可以进行运算，除模型驱动以及值栈内取值之外都要加#</li>
</ol>
</li>
<li>service层<br>本次项目并未多少体现出来，我们只要注意添加spring事务注解</li>
<li>dao层<br>此次使用的hibernate，要点如下<ol>
<li>实体映射文件：对于主外键一定要设置正确，懒加载问题，级联删除问题</li>
<li>hql语句：join的用法，面向对象的语句编写</li>
</ol>
</li>
</ol>
<h2 id="项目模块"><a href="#项目模块" class="headerlink" title="项目模块"></a>项目模块</h2><p>这里只是简单说说作为一个商场应该具有的模块</p>
<ol>
<li>前台<br>首页；前台用户 ；一级目录； 二级目录； 商品； 购物车； 订单</li>
<li>后台<br>后台用户；一级目录；二级目录；商品；订单</li>
</ol>
<h2 id="查bug方法"><a href="#查bug方法" class="headerlink" title="查bug方法"></a>查bug方法</h2><p>即使是按着视频来的，但是也还是会出错，有的时候还查了一个多小时，bug：码农的一生之敌呀！<br>回到正题：首先看控制台错误，分析错误类型</p>
<ol>
<li>前台传数据错误<br>可以将表单的发送方式改为get，这个就可以从uri中看出错误了，自己好几次入坑，就是在参数填写的地方多了一个空格，欲哭无泪。</li>
<li>业务逻辑代码错误<br>其实最简单也最烦，就是利用debug。按逻辑顺序进行查错。</li>
<li>数据库查询出错<br>可以充分利用控制台输出的sql语句进行排错，将sql语句放到sql桌面程序中查询，是否与自己想要的结果一致，如果不一致，就很有可能是自己的hql语句写错，或者映射文件出错了。</li>
</ol>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>关于这个项目架构都是比较简单的，业务逻辑也都是CRUD也算简单，可能还有最重要的高并发问题没有考虑，但是整个项目做下来，自己也算理解了整个项目系统，但是自己绝对不能以CRUD为终点，继续向前加油！！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：历时四天，终于在视频的帮助下完成了基于SSH（struts2+hibernate3+spring4）的一个网站商城项目，也是自己第一次采用idea开发项目简单，谈谈收获和感想。
    
    </summary>
    
      <category term="编程" scheme="http://bestlixiang.site/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ssh" scheme="http://bestlixiang.site/tags/ssh/"/>
    
      <category term="java" scheme="http://bestlixiang.site/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>iis实现手机端访问电脑本地服务器</title>
    <link href="http://bestlixiang.site/2017/04/24/iis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%AE%BF%E9%97%AE%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://bestlixiang.site/2017/04/24/iis实现手机端访问电脑本地服务器/</id>
    <published>2017-04-24T12:41:48.000Z</published>
    <updated>2017-04-29T01:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>引：对于很多没有服务器的人来说,实现手机端访问自己写的网页还是有困难的，虽然我们可以可以利用githubpage来实现挂载页面，但是调试起来还是不方便，所以iis就成为了一种简单的方式。<a id="more"></a></p>
<h2 id="iis简介"><a href="#iis简介" class="headerlink" title="iis简介"></a>iis简介</h2><p>iis（Internet Information Services）是由微软公司提供的基于运行Microsoft  Windows的互联网基本服务,其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。</p>
<h2 id="iis安装"><a href="#iis安装" class="headerlink" title="iis安装"></a>iis安装</h2><p>这里我就不多说了，网上一搜，安装教程一大把，这里推荐一个链接<a href="https://jingyan.baidu.com/article/e2284b2b3cb58ae2e6118d22.html" target="_blank" rel="external">安装iis</a></p>
<h2 id="有无线的时候使用"><a href="#有无线的时候使用" class="headerlink" title="有无线的时候使用"></a>有无线的时候使用</h2><p>大部分人，大部分时间，大部分地方，相信大家都会身处在无线之下，所以只要按照上面的链接使用就可以了。</p>
<h2 id="没无线的时候使用"><a href="#没无线的时候使用" class="headerlink" title="没无线的时候使用"></a>没无线的时候使用</h2><p>这个时候就要借助流量与热点了</p>
<ol>
<li>打开手机热点</li>
<li>查看电脑ip地址<br>一般这个时候ip地址已经变了，所有之前按照有无线的时候电脑的ip设置访问地址就有问题了，所以要利用新的ip地址设置访问地址</li>
<li>用手机访问新的ip地址<br>一下子就爽歪歪了</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>iis对于windows用户来说真是出家旅行，调试代码必备之良品。</li>
<li>当不能访问的时候一定要随时关注电脑的ip地址是否已经发生变化，做到随时更改</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引：对于很多没有服务器的人来说,实现手机端访问自己写的网页还是有困难的，虽然我们可以可以利用githubpage来实现挂载页面，但是调试起来还是不方便，所以iis就成为了一种简单的方式。
    
    </summary>
    
      <category term="编程" scheme="http://bestlixiang.site/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="服务器" scheme="http://bestlixiang.site/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
